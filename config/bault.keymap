#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt { quick-tap-ms = <200>; };

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            display-name = "Homerow Mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 16 17 18 19 20 26 27 28 29 30 35 36 37 38 25 5>;
            quick-tap-ms = <175>;
            label = "hml";
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            display-name = "Homerow Mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            label = "HMR";
            hold-trigger-key-positions = <0 1 2 3 4 11 12 13 14 15 21 22 23 24 31 32 33 34 25>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        sblayer: sblayer {
            compatible = "zmk,behavior-hold-tap";
            label = "SBLAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <99999>;
            quick-tap-ms = <175>;
            retro-tap;
            flavor = "tap-unless-interrupted";
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            display-name = "Homerow Mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 16 17 18 19 20 26 27 28 29 30 35 36 37 38 25 5>;
            quick-tap-ms = <175>;
            label = "NEW_BEHAVIOR";
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        lbracket {
            timeout-ms = <20>;
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 1>;
        };

        lpar {
            timeout-ms = <20>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        rbracket {
            timeout-ms = <20>;
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        rpar {
            timeout-ms = <20>;
            bindings = <&kp RPAR>;
            key-positions = <7 6>;
        };

        lgui {
            bindings = <&skq LEFT_GUI>;
            key-positions = <11 14>;
            timeout-ms = <30>;
            require-prior-idle-ms = <20>;
        };

        lessthan {
            timeout-ms = <25>;
            bindings = <&kp LT>;
            key-positions = <1 3>;
            require-prior-idle-ms = <20>;
            layers = <0>;
        };

        greaterthan {
            timeout-ms = <25>;
            bindings = <&kp GT>;
            key-positions = <8 6>;
        };

        lbrace {
            timeout-ms = <25>;
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 14>;
            layers = <0>;
            require-prior-idle-ms = <20>;
        };

        rbrace {
            timeout-ms = <25>;
            bindings = <&kp RBRC>;
            key-positions = <17 8>;
            layers = <0>;
            require-prior-idle-ms = <20>;
        };

        semi {
            timeout-ms = <30>;
            bindings = <&kp SEMI>;
            key-positions = <12 14>;
        };

        colon {
            timeout-ms = <30>;
            bindings = <&kp COLON>;
            key-positions = <17 19>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <34 11>;
            timeout-ms = <40>;
            require-prior-idle-ms = <20>;
            layers = <0 2>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <12 34>;
            timeout-ms = <40>;
            require-prior-idle-ms = <20>;
            layers = <0 2>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <13 34>;
            timeout-ms = <40>;
            require-prior-idle-ms = <20>;
            layers = <0 2>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <34 14>;
            timeout-ms = <40>;
            require-prior-idle-ms = <20>;
            layers = <0 2>;
        };

        connectivity {
            bindings = <&mo 5>;
            key-positions = <33 36>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <34 14 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <20>;
            layers = <0 2>;
        };

        lshift {
            bindings = <&skq LSHFT>;
            key-positions = <13 12>;
            require-prior-idle-ms = <20>;
            timeout-ms = <25>;
        };

        rshift {
            bindings = <&skq RSHFT>;
            key-positions = <19 18>;
            timeout-ms = <25>;
            require-prior-idle-ms = <20>;
        };

        esc {
            timeout-ms = <40>;
            bindings = <&kp ESC>;
            key-positions = <1 34>;
            require-prior-idle-ms = <30>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
            require-prior-idle-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <14 13>;
        };

        productivity {
            bindings = <&sl 4>;
            key-positions = <3 34>;
            timeout-ms = <40>;
            require-prior-idle-ms = <60>;
            layers = <0>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <14 17>;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
        };

        capslock {
            bindings = <&kp CAPS>;
            key-positions = <2 7>;
            timeout-ms = <35>;
            require-prior-idle-ms = <20>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <9 8>;
            timeout-ms = <30>;
            require-prior-idle-ms = <20>;
        };

        tilde {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <9 7>;
            timeout-ms = <25>;
            require-prior-idle-ms = <20>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <1 0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <20>;
        };

        pipe {
            bindings = <&kp LS(BACKSLASH)>;
            key-positions = <0 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <20>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <34 2>;
            timeout-ms = <40>;
            require-prior-idle-ms = <20>;
            layers = <0 2>;
        };
    };

    macros {
        sappy: sappy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp S &kp A &kp P &kp P &kp Y>;
            label = "SAPPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q            &kp W            &kp E                &kp R            &kp T  &kp Y             &kp U             &kp I         &kp O        &kp P      &tog 0
&hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_GUI F  &kp G  &kp H             &hmr RIGHT_GUI J  &hmr RCTRL K  &hmr RALT L  &kp SQT
&kp Z            &kp X            &kp C                &kp V            &kp B  &kp N             &kp M             &kp COMMA     &kp PERIOD   &kp SLASH
&kp N0           &mo 5            &sl 0                &lt 2 SPACE             &sblayer 1 ENTER                    &sl 3         &mo 5        &kp N0
            >;
        };

        num {
            bindings = <
&kp LS(EXCL)            &kp LS(AT)          &kp LS(POUND)  &kp LS(DLLR)        &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp MINUS  &kp EQUAL  &none
&hml LEFT_GUI NUMBER_1  &hml LALT NUMBER_2  &hml LCTRL N3  &hml LGUI NUMBER_4  &kp N5         &kp N6         &kp N7        &kp N8        &kp N9     &kp N0
&sk LEFT_ALT            &skq LEFT_GUI       &none          &none               &none          &none          &none         &trans        &trans     &trans
&none                   &none               &none          &skq LEFT_SHIFT                    &trans                       &trans        &none      &none
            >;
        };

        nav {
            bindings = <
&trans          &kp HOME        &kp PAGE_DOWN  &kp PG_UP        &kp END    &none   &kp N7  &kp N8  &kp N9  &kp MINUS     &trans
&hml LGUI LEFT  &hml LALT DOWN  &hml LCTRL UP  &hml LGUI RIGHT  &kp ENTER  &none   &kp N4  &kp N5  &kp N6  &kp LS(PLUS)
&kp ESCAPE      &trans          &trans         &trans           &trans     &none   &kp N1  &kp N2  &kp N3  &kp N0
&trans          &trans          &trans         &trans                      &trans          &trans  &trans  &trans
            >;
        };

        gettin_funcy {
            bindings = <
&none  &kp F8  &kp F9  &kp F10  &kp F11  &none  &none       &none       &none      &none      &none
&none  &kp F4  &kp F5  &kp F6   &kp F12  &none  &skq RSHFT  &skq RCTRL  &skq RALT  &skq RGUI
&none  &kp F1  &kp F2  &kp F3   &kp F13  &none  &none       &none       &none      &none
&none  &none   &none   &none             &none              &none       &none      &none
            >;
        };

        productivity {
            bindings = <
&none          &kp LG(LS(N3))  &kp LG(LS(N4))  &kp LG(LS(N5))  &none  &none  &none  &none  &none  &none  &none
&none          &none           &none           &none           &none  &none  &none  &none  &none  &none
&kp LG(LS(X))  &none           &none           &none           &none  &none  &none  &none  &none  &none
&none          &none           &none           &none                  &none         &none  &none  &none
            >;
        };

        connectivity {
            bindings = <
&studio_unlock  &trans  &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bootloader
&trans          &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans
&trans          &trans  &trans  &trans  &trans  &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans
&kp N0          &trans  &trans  &trans          &trans                      &trans        &trans        &kp N0
            >;
        };

        sym {
            bindings = <
&trans        &kp LA(LBKT)    &kp LA(RBKT)     &kp LA(MINUS)   &trans     &trans    &kp RA(RS(MINUS))  &kp RA(RS(RBKT))  &kp RA(RS(LBKT))  &trans          &trans
&hml LGUI LT  &hml LALT LBKT  &hml LCTRL LBRC  &hml LGUI LPAR  &kp GRAVE  &kp BSLH  &hmr RGUI RPAR     &hmr RCTRL RBRC   &hmr RALT RBKT    &hmr RGUI RBKT
&trans        &trans          &trans           &trans          &trans     &trans    &trans             &trans            &trans            &trans
&trans        &trans          &trans           &trans                     &trans                       &trans            &trans            &trans
            >;
        };
    };
};
