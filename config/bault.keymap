#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            display-name = "Homerow Mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <130>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        lbracket {
            timeout-ms = <20>;
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 1>;
        };

        lpar {
            timeout-ms = <20>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        rbracket {
            timeout-ms = <20>;
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        rpar {
            timeout-ms = <20>;
            bindings = <&kp RPAR>;
            key-positions = <7 6>;
        };

        lgui {
            bindings = <&sk LEFT_GUI>;
            key-positions = <11 14>;
        };

        lessthan {
            timeout-ms = <20>;
            bindings = <&kp LT>;
            key-positions = <1 3>;
        };

        greaterthan {
            timeout-ms = <20>;
            bindings = <&kp GT>;
            key-positions = <8 6>;
        };

        lbrace {
            timeout-ms = <20>;
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 14>;
        };

        rbrace {
            timeout-ms = <20>;
            bindings = <&kp RBRC>;
            key-positions = <17 8>;
        };

        semi {
            timeout-ms = <20>;
            bindings = <&kp SEMI>;
            key-positions = <20 18>;
        };

        colon {
            timeout-ms = <20>;
            bindings = <&kp COLON>;
            key-positions = <17 19>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <34 11>;
            timeout-ms = <15>;
            require-prior-idle-ms = <20>;
            layers = <0 3>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <12 34>;
            timeout-ms = <15>;
            require-prior-idle-ms = <20>;
            layers = <0 3>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <13 34>;
            timeout-ms = <15>;
            require-prior-idle-ms = <20>;
            layers = <0 3>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <34 14>;
            timeout-ms = <15>;
            require-prior-idle-ms = <20>;
            layers = <0 3>;
        };

        connectivity {
            bindings = <&mo 6>;
            key-positions = <33 36>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <34 14 11>;
            timeout-ms = <15>;
            require-prior-idle-ms = <20>;
            layers = <0 3>;
        };

        lshift {
            bindings = <&sk LSHFT>;
            key-positions = <13 12>;
        };

        rshift {
            bindings = <&sk RSHFT>;
            key-positions = <19 18>;
        };

        esc {
            timeout-ms = <20>;
            bindings = <&kp ESC>;
            key-positions = <1 34>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <14 13>;
        };

        productivity {
            bindings = <&sl 6>;
            key-positions = <3 34>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <1 8>;
        };

        capslock {
            bindings = <&kp CAPS>;
            key-positions = <2 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q           &kp W           &kp E               &kp R           &kp T  &kp Y        &kp U  &kp I            &kp O       &kp P      &tog 0
&hm LEFT_GUI A  &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_GUI F  &kp G  &kp H        &kp J  &kp K            &kp L       &kp SQT
&kp Z           &kp X           &kp C               &kp V           &kp B  &kp N        &kp M  &kp COMMA        &kp PERIOD  &kp SLASH
&kp N0          &none           &mo 2               &lt 3 SPACE            &lt 1 ENTER         &kp RIGHT_SHIFT  &none       &kp N0
            >;
        };

        num {
            bindings = <
&kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)    &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp MINUS  &kp EQUAL  &none
&kp N1        &kp N2        &kp N3         &kp N4          &kp N5         &kp N6         &kp N7        &kp N8        &kp N9     &kp N0
&sk LEFT_ALT  &sk LEFT_GUI  &none          &none           &none          &none          &none         &trans        &trans     &trans
&none         &none         &none          &sk LEFT_SHIFT                 &trans                       &trans        &none      &none
            >;
        };

        numpad {
            bindings = <
&none     &kp LS(LT)  &kp LS(GT)  &kp EQUAL  &none    &none         &kp N7  &kp N8  &kp N9  &kp LS(PLUS)  &none
&sk LGUI  &sk LALT    &sk LCTRL   &sk LSHFT  &kp TAB  &kp LS(STAR)  &kp N4  &kp N5  &kp N6  &kp MINUS
&kp LBKT  &none       &kp COMMA   &kp RBKT   &none    &kp DOT       &kp N1  &kp N2  &kp N3  &kp SLASH
&none     &none       &none       &none               &kp N0                &none   &none   &none
            >;
        };

        nav {
            bindings = <
&trans      &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END    &none   &none      &none      &none     &trans    &trans
&kp LEFT    &kp DOWN  &kp UP         &kp RIGHT  &kp ENTER  &none   &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&kp ESCAPE  &trans    &trans         &trans     &trans     &none   &none      &none      &none     &trans
&trans      &trans    &trans         &trans                &trans             &trans     &trans    &trans
            >;
        };

        gettin_funcy {
            bindings = <
&none  &kp F8  &kp F9  &kp F10  &kp F11  &none  &none      &none      &none     &none     &none
&none  &kp F4  &kp F5  &kp F6   &kp F12  &none  &sk RSHFT  &sk RCTRL  &sk RALT  &sk RGUI
&none  &kp F1  &kp F2  &kp F3   &kp F13  &none  &none      &none      &none     &none
&none  &none   &none   &none             &none             &none      &none     &none
            >;
        };

        productivity {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none         &none         &none  &none  &none
            >;
        };

        connectivity {
            bindings = <
&studio_unlock  &trans  &trans  &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bootloader
&trans          &trans  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans
&trans          &trans  &trans  &trans  &trans  &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans
&kp N0          &trans  &trans  &trans          &trans                      &trans        &trans        &kp N0
            >;
        };
    };
};
